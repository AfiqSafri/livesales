generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  name                  String
  email                 String         @unique
  password              String
  userType              String
  status                String         @default("active")
  bio                   String?
  phone                 String?
  address               String?
  companyName           String?
  businessType          String?
  profileImage          String?
  createdAt             DateTime       @default(now())
  isSubscribed          Boolean        @default(false)
  isTrialActive         Boolean        @default(false)
  subscriptionEndDate   DateTime?
  subscriptionStartDate DateTime?
  subscriptionStatus    String         @default("inactive")
  subscriptionTier      String?
  trialEndDate          DateTime?
  trialStartDate        DateTime?
  bankAccountHolder     String?
  bankAccountNumber     String?
  bankCode              String?
  bankName              String?
  notifications         Notification[]
  orders                Order[]        @relation("buyerOrders")
  payments              Payment[]
  products              Product[]
}

model Product {
  id                 Int            @id @default(autoincrement())
  name               String
  description        String
  price              Float
  image              String
  sellerId           Int
  createdAt          DateTime       @default(now())
  quantity           Int            @default(0)
  shippingPrice      Float          @default(0)
  discountEndDate    DateTime?
  discountPercentage Float?
  discountType       String?
  hasDiscount        Boolean        @default(false)
  orders             Order[]        @relation("productOrders")
  seller             User           @relation(fields: [sellerId], references: [id])
  images             ProductImage[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id                Int                  @id @default(autoincrement())
  productId         Int
  buyerId           Int?
  buyerName         String               @default("")
  buyerEmail        String?
  quantity          Int
  shippingAddress   String
  phone             String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  status            String               @default("pending")
  totalAmount       Float                @default(0)
  trackingNumber    String?
  courierName       String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  paymentStatus     String               @default("pending")
  paymentMethod     String?
  paymentDate       DateTime?
  billplzBillId     String?
  billplzPaid       Boolean              @default(false)
  shippingMethod    String?
  shippingCost      Float                @default(0)
  sellerNotes       String?
  buyerNotes        String?
  receiptUrl        String?
  paymentId         Int?
  notifications     Notification[]
  buyer             User?                @relation("buyerOrders", fields: [buyerId], references: [id])
  payment           Payment?             @relation(fields: [paymentId], references: [id])
  product           Product              @relation("productOrders", fields: [productId], references: [id])
  statusHistory     OrderStatusHistory[]
}

model OrderStatusHistory {
  id          Int      @id @default(autoincrement())
  orderId     Int
  status      String
  description String?
  location    String?
  createdAt   DateTime @default(now())
  updatedBy   String?
  order       Order    @relation(fields: [orderId], references: [id])

  @@index([orderId, createdAt])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  orderId   Int?
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  order     Order?   @relation(fields: [orderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
}

model CourierIntegration {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  apiKey    String
  apiSecret String?
  baseUrl   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrackingEvent {
  id               Int      @id @default(autoincrement())
  trackingNumber   String
  courierName      String
  eventType        String
  eventDescription String
  location         String?
  timestamp        DateTime
  createdAt        DateTime @default(now())

  @@index([trackingNumber, courierName])
}

model Payment {
  id            Int       @id @default(autoincrement())
  userId        Int
  amount        Float
  currency      String    @default("MYR")
  status        String
  paymentMethod String    @default("billplz")
  billplzBillId String?   @unique
  billplzUrl    String?
  reference     String    @unique
  description   String
  plan          String
  paidAmount    Float?
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  user          User      @relation(fields: [userId], references: [id])
}
